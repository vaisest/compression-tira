import os
import unittest
from random import shuffle

from pakkaus import lzw


class TestLzwFunctions(unittest.TestCase):
    def test_compress(self):
        little_data = lzw.compress(b"B")
        self.assertEqual(little_data, b"\x00B")

        data = lzw.compress(b"IUFGIUFGUDFYUY")
        self.assertEqual(
            data,
            b"\x00I\x00U\x00F\x00G\x01\x00\x01\x02\x00U\x00D\x00F\x00Y\x00U\x00Y",
        )

        big_data = lzw.compress(
            "IUFGIUFGUDFYUY453845845675464587bndguf348yyhgft84i7hy587t48558hyt8g475IUFGIUFGUDFYUY453845845675464587bndguf348yyhgft84i7hy587t48558hyt8g475"
            * 5
        )
        self.assertEqual(
            big_data,
            b"\x00I\x00U\x00F\x00G\x01\x00\x01\x02\x00U\x00D\x00F\x00Y\x00U\x00Y\x004\x005\x003\x008\x01\x0c\x01\x0f\x005\x006\x007\x005\x004\x006\x01\x10\x007\x00b\x00n\x00d\x00g\x00u\x00f\x003\x004\x008\x00y\x00y\x00h\x00g\x00f\x00t\x01\x0f\x00i\x007\x00h\x00y\x005\x008\x007\x00t\x01!\x005\x01.\x01,\x01(\x00g\x004\x01\x14\x01\x04\x01\x03\x01\x01\x00G\x01\x06\x01\x08\x01\n\x01\x0c\x01\x0e\x01\x10\x01\x0c\x01\x13\x01\x15\x01\x17\x01.\x01\x19\x01\x1b\x01\x1d\x01\x1f\x01!\x01#\x01%\x01'\x01)\x01+\x01-\x01/\x011\x008\x013\x008\x015\x008\x017\x019\x01<\x01:\x01>\x01\t\x01\x0b\x01\r\x01\x11\x01\x11\x01E\x01\x16\x01\x18\x01\x1a\x01\x1c\x01\x1e\x01 \x01\"\x01$\x01&\x01(\x004\x01*\x01,\x01H\x01U\x01W\x01Y\x01[\x005\x01:\x01^\x01\x07\x01`\x01A\x01c\x01D\x01\x14\x01f\x01H\x01h\x01K\x01k\x01N\x01n\x01Q\x01r\x01T\x012\x014\x00y\x016\x018\x01x\x01]\x01<\x01_\x01@\x01b\x01C\x01\x12\x01\x80\x01G\x01/\x01\x83\x01j\x01M\x01m\x01P\x01p\x01R\x01s\x01\x8b\x01X\x01\x8d\x01Z\x01\x8f\x01y\x01\x92\x01{\x01\x94\x01B\x01.\x01\x7f\x01F\x01g\x01J\x01\x9c\x01l\x01O\x01o\x01q\x01S\x010\x01\xa3\x01v\x01\xa7\x01\x91\x01\x05\x01\xaa\x01a\x01\xac\x01d\x01\x98\x01\xb0\x01i\x01L\x01\xb3\x01\x87\x01\xa0\x01\x89\x01\xb8\x01V\x01\x8c\x01\x8e\x01\\\x01\x02\x01z\x01?\x01\xbf\x01~\x01\x97\x01\xaf\x01\x82\x01\xb1\x01\xc5\x01\x86\x01\x9f\x01\xb6\x01\xa2\x01\xcb\x01\xa4\x01\xcd\x01\x90\x01\xcf\x01\xa9\x01\xd1\x01}\x01\x96\x01e\x01\x99\x01I\x01\xc4\x01\x85\x01\x9e\x01\xb5\x01\xa1\x01\x8a\x01\xdd\x01\xba\x01\xce\x01;\x01\xbd\x01\xe3\x01\x95\x01\xad\x01\xd4\x01\x81\x01\x9a\x01\xd7\x01\xea\x01\xb4\x01\x88\x01\xb7\x01t\x01\xcc\x01\xa6\x01\x14",
        )

        empty_data = bytes()
        self.assertRaises(ValueError, lzw.compress, empty_data)

    def test_uncompress(self):
        little_data = b"\x00B"
        little_decoded_str = lzw.uncompress(little_data)
        self.assertEqual(little_decoded_str, b"B")

        data = b"\x00M\x00E\x00R\x00K\x00K\x00I\x00J\x00O\x00N\x00O\x00!"

        decoded_str = lzw.uncompress(data).decode("UTF-8")
        self.assertEqual(decoded_str, "MERKKIJONO!")

        big_data = b"\x00I\x00S\x00O\x00_\x00M\x00E\x00R\x00K\x00K\x00I\x00J\x00O\x00N\x00O\x00,\x00 \x00P\x00A\x00L\x01\n\x00N\x00 \x01\x05\x00I\x00K\x00O\x01\x00\x00I\x00@\x00 \x01\x04\x01\x06\x00K\x00E\x00J\x00\xc3\x00\x84\x00 \x00j\x00a\x00 \x00e\x00r\x00i\x00 \x00k\x00o\x01-\x00i\x00s\x00i\x01'\x00m\x01)\x00k\x00k\x00e\x00j\x00\xc3\x00\xa4\x00!\x01<\x00!\x00?\x01\x00\x01\x02\x01\x1e\x01\x07\x01\t\x01\x0b\x01\r\x01\x0f\x01\x11\x01\x13\x01\x15\x00R\x01\x17\x01\x19\x00S\x01\x1b\x01\x1d\x01\x05\x01\x07\x01!\x01#\x01%\x01'\x01)\x01+\x01-\x01/\x011\x013\x015\x017\x019\x01;\x01=\x01?\x01\x01\x01\x03\x01Q\x01\x08\x01\x13\x01F\x01\x10\x01\x12\x01\x0b\x01J\x01L\x01\x1a\x01\x1c\x01B\x01 \x01\"\x01$\x01&\x01(\x01*\x01,\x01.\x00o\x010\x012\x00 \x014\x00r\x016\x018\x01:\x01=\x01>\x01@\x01d\x01\x1f\x01D\x01\x0c\x01\x0e\x01i\x01I\x01\x16\x01\x18\x01n\x01P\x01\x1f\x01S\x01s\x01V\x01v\x01Y\x01y\x01[\x01|\x01]\x01\x80\x01`\x01<\x01b\x01A\x01e\x01\x87\x01h\x01H\x01k\x01\x8c\x01M\x01O\x01p\x01\x91\x01U\x01u\x01X\x01x\x01z\x01\\\x01~\x01^\x01\x81\x01a"

        big_decoded_str = lzw.uncompress(big_data).decode("UTF-8")
        self.assertEqual(
            big_decoded_str,
            "ISO_MERKKIJONO, PALJON ERIKOISI@ MERKKEJÄ ja eri kokoisia merkkejä!!!!?" * 5,
        )

        empty_data = bytes()
        self.assertRaises(ValueError, lzw.uncompress, empty_data)

    def test_compressing_files(self):
        file_contents = (
            f"""
            This is a test file
            for the
            tir@l@Br@! :))
            """
            * 5000
        )

        # jotta saadaan sanakirjan tyhjennys toimimaan
        file_contents = list(file_contents)
        shuffle(file_contents)
        file_contents = "".join(file_contents)

        source_file = "AUTOMATED.TEST.FILE.txt"
        destination_file = "AUTOMATED.TEST.FILE.LZW"
        unpacked_file = "AUTOMATED.TEST.FILE.unpacked.txt"

        with open(source_file, "w") as f:
            f.write(file_contents)

        lzw.compress_file(source_file, destination_file)

        lzw.uncompress_file(destination_file, unpacked_file)

        with open(unpacked_file, "r") as f:
            unpacked = f.read()

        self.assertEqual(file_contents, unpacked)

        hopefully_inexistent_file = "AUTOMATED.INEXISTENT.FILE.TXT.LONG.EXTENSION"

        self.assertRaises(OSError, lzw.compress_file, hopefully_inexistent_file, unpacked_file)

        self.assertRaises(OSError, lzw.compress_file, source_file, "")

        self.assertRaises(OSError, lzw.uncompress_file, hopefully_inexistent_file, unpacked_file)

        self.assertRaises(OSError, lzw.uncompress_file, destination_file, "")

        os.remove(source_file)
        os.remove(destination_file)
        os.remove(unpacked_file)
